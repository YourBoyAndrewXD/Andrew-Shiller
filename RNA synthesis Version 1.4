using Pkg
Pkg.add(["Catalyst", "DifferentialEquations", "Plots"])

using Catalyst
using DifferentialEquations
using Plots

# Define the species
#=
Define the species:
Cp is the inactivated species
ACp is the activated species
RNA is the RNA strand  
A is 2-aminoimidazole
CppC is the catalyzed dimer (1,3-di(Cystine-5â€²-phosphoro)-2-aminoimidazolium)
=#
@variables t
@species Cp(t) RNA(t) CppC(t) ACp(t) A(t)
@parameters K_m v_max Keff Ki V(t)

# Define V_func(t)
V_func(t) = 5.05 + 4.95 * sin(2 * pi * t / 10 - 0.96)

# Define the reactions
rxns = @reaction_network begin
    k1/V_func(t)^2, 2ACp --> CppC + A                        # Formation of the catalyst (dimer of Cp)
    mm(CppC, v_max, Keff), CppC --> Cp + RNA                 # Catalyzed polymer growth
    k3/V_func(t)^2, Cp + A --> ACp                           # Formation of Activated Cystine
    k4/V_func(t), CppC --> ACp + Cp                          # Degradation of the Catalyzed dimer
    k5/V_func(t), ACp --> Cp + A                             # Degradation of the Activated Cystine
    k6/V_func(t), CppC + A --> 2ACp                          # Degradation of the catalyzed dimer with 2-aminoimidazole
end

# Initial conditions for the species
u0 = [1000.0, 0.0, 0.0, 1.0, 0.0]  # Initial concentrations for ACp, CppC, A, RNA, Cp

# Parameters for the reactions (rate constants)
k1 = 4.55e3  # h^-1 mM^-1
k3 = 0.1     # h^-1
k4 = 0.167   # h^-1
k5 = 3.33e-3 # h^-1
k6 = 0.183   # h^-1 mM^-1

# Additional parameters
K_m = 1.06   # mM
v_max = 19.5 # h^-1
Ki = 24.7    # mM
# Keff will be updated in the ODE function
p = [k1, k3, k4, k5, k6, K_m, v_max, Ki]

tspan = (0.0, 50.0)

# Define the ODE function to account for volume changes
function ode_func(dy, y, p, t)
    ACp, CppC, A, RNA, Cp = y
    k1, k3, k4, k5, k6, K_m, v_max, Ki = p

    # Get the current volume
    V = V_func(t)
    Keff = K_m * (1 + (Cp + ACp) / Ki)  # Effective Michaelis constant

    # Define the reaction rates
    r1 = k1 * (ACp / V)^2
    r2 = v_max * (CppC / V) / (Keff + (CppC / V))
    r3 = k3 * (Cp / V) * (A / V)
    r4 = k4 * (CppC / V)
    r5 = k5 * (ACp / V)
    r6 = k6 * (CppC / V) * (A / V)

    # Define the ODEs for concentrations
    dy[1] = -2r1 + r3 - r5 + 2r6  # dACp/dt
    dy[2] = r1 - r2 - r4 - r6     # dCppC/dt
    dy[3] = r1 - r3 + r5 - r6     # dA/dt
    dy[4] = r2                   # dRNA/dt
    dy[5] = r2 + r4 - r3 + r5    # dCp/dt
end

# Create the ODE problem
prob = ODEProblem(ode_func, u0, tspan, p)

# Solve the ODE problem
sol = solve(prob, Tsit5())

# Calculate the absolute number of RNA molecules over time
rna_count = sol[4, :]

# Desired polymer size in number of molecules
desired_polymer_size = 50  # This is the target size (number of RNA molecules)

# Find the time it takes to reach the desired RNA size
time_to_reach_size = findfirst(>(desired_polymer_size), rna_count)

# Plot the concentrations over time
concentration_plot = plot(sol, vars=[1, 2, 3, 4, 5], label=["ACp" "CppC" "A" "RNA" "Cp"], xlabel="Time", ylabel="Concentration", legend=:right)
title!("Polymer Growth with Catalyst")

# Plot the size of the polymer over time
rna_plot = plot(sol.t, rna_count, xlabel="Time", ylabel="Number of RNA Molecules", legend=false)
title!("Number of RNA Molecules Over Time")

# Plot the volume function over time
t = range(tspan[1], stop=tspan[2], length=length(sol.t))
V_plot = plot(t, V_func.(t), xlabel="Time", ylabel="Volume", legend=false)
title!("Volume Over Time")

# Combine the plots
combined_plot = plot(concentration_plot, rna_plot, V_plot, layout=(3, 1))

# Display the combined plot
display(combined_plot)

# Display the time to reach the desired RNA size
println("Time to reach the desired polymer size ($desired_polymer_size units): $time_to_reach_size")

# Combine the plots Volume and concentrations
combined_plot = plot(concentration_plot, V_plot, layout=(2, 1))

# Max RNA found
max_rna = maximum(sol[4, :])
time_to_max_rna = sol.t[argmax(sol[4, :])]
